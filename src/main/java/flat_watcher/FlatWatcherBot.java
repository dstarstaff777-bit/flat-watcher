package flat_watcher;

import model.FlatListing;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import parser.AvitoParser;
import util.Config;

import java.time.Duration;
import java.util.List;

public class FlatWatcherBot extends TelegramLongPollingBot {

    private final AvitoParser parser;
    private final String botToken = System.getenv("BOT_TOKEN");
    private final long ownerChatId = Long.parseLong(System.getenv("CHAT_ID"));

    public FlatWatcherBot() {
        this.parser = new AvitoParser();
    }

    @Override
    public void onUpdateReceived(Update update) {
        System.out.println("BOT_TOKEN = " + System.getenv("BOT_TOKEN"));
        System.out.println("CHAT_ID = " + System.getenv("CHAT_ID"));
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            long chatId = update.getMessage().getChatId();

            if (messageText.equals("/start")) {
                sendMessage(chatId,
                        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã üè†\n" +
                                "–§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã:\n" +
                                "/find <–∫–æ–º–Ω–∞—Ç> <–º–∞–∫—Å_—Ü–µ–Ω–∞> <—Ä–∞–π–æ–Ω> <–º–∏–Ω—É—Ç—ã>\n\n" +
                                "–ü—Ä–∏–º–µ—Ä: /find 1 3000000 –¶–µ–Ω—Ç—Ä 60");
            } else if (messageText.startsWith("/find")) {
                String[] parts = messageText.split(" ", 5);

                if (parts.length < 5) {
                    sendMessage(chatId,
                            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n" +
                                    "–ò—Å–ø–æ–ª—å–∑—É–π: /find <–∫–æ–º–Ω–∞—Ç> <–º–∞–∫—Å_—Ü–µ–Ω–∞> <—Ä–∞–π–æ–Ω> <–º–∏–Ω—É—Ç—ã>");
                    return;
                }

                int rooms;
                int maxPrice;
                String district;
                int minutes;
                try {
                    rooms = Integer.parseInt(parts[1]);
                    maxPrice = Integer.parseInt(parts[2]);
                    district = parts[3];
                    minutes = Integer.parseInt(parts[4]);
                } catch (NumberFormatException e) {
                    sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–Ω–∞—Ç—ã, —Ü–µ–Ω–∞ –∏ –º–∏–Ω—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.");
                    return;
                }

                // URL Avito
                String baseUrl = "https://www.avito.ru/uzlovaya/kvartiry/prodam";
                if (rooms == 1) {
                    baseUrl += "/1-komnatnye-ASgBAgICAUSSA8YQwM0U";
                } else if (rooms == 2) {
                    baseUrl += "/2-komnatnye-ASgBAgICAUSSA8YQwM0U";
                } else if (rooms == 3) {
                    baseUrl += "/3-komnatnye-ASgBAgICAUSSA8YQwM0U";
                }

                // –ü–∞—Ä—Å–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                List<FlatListing> flats = parser.fetchListings(baseUrl, Duration.ofMinutes(minutes));

                // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ü–µ–Ω–µ –∏ —Ä–∞–π–æ–Ω—É
                List<FlatListing> filtered = flats.stream()
                        .filter(f -> f.getPrice() <= maxPrice)
                        .filter(f -> f.getDistrict().contains(district))
                        .toList();

                if (filtered.isEmpty()) {
                    sendMessage(chatId, "üòî –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.");
                } else {
                    for (FlatListing flat : filtered) {
                        String text = String.format(
                                "üè† <b>%s</b>\nüí∞ %s ‚ÇΩ\nüìç %s\nüîó <a href=\"%s\">–°—Å—ã–ª–∫–∞</a>",
                                flat.getTitle(),
                                flat.getPrice(),
                                flat.getDistrict(),
                                flat.getUrl()
                        );
                        SendMessage msg = new SendMessage(String.valueOf(chatId), text);
                        msg.setParseMode("HTML");
                        try {
                            execute(msg);
                        } catch (TelegramApiException e) {
                            e.printStackTrace();
                        }
                    }
                }
            } else {
                sendMessage(chatId, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏ /start –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.");
            }
        }
    }

    /**
     *  –ú–µ—Ç–æ–¥ –¥–ª—è –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –æ–±—å—è–≤–ª–µ–Ω–∏–π (–ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é)
     */
    public void checkNewFlats() {
        List<FlatListing> flats = parser.fetchListings(
                "https://www.avito.ru/uzlovaya/kvartiry/prodam",
                Duration.ofMinutes(60) // —Ñ–∏–ª—å—Ç—Ä: —Å–≤–µ–∂–∏–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 –º–∏–Ω—É—Ç
        );

        if (flats.isEmpty()) {
            sendMessage(ownerChatId, "–°–≤–µ–∂–∏—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 –º–∏–Ω—É—Ç –Ω–µ—Ç üí§");
        } else {
            for (FlatListing flat : flats) {
                String text = String.format(
                        "üè† <b>%s</b>\nüí∞ %s ‚ÇΩ\nüìç %s\nüîó <a href=\"%s\">–°—Å—ã–ª–∫–∞</a>",
                        flat.getTitle(),
                        flat.getPrice(),
                        flat.getDistrict(),
                        flat.getUrl()
                );

                SendMessage msg = new SendMessage(String.valueOf(ownerChatId), text);
                msg.setParseMode("HTML");
                try {
                    execute(msg);
                } catch (TelegramApiException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    private void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    @Override
    public String getBotUsername() {
        return "ValeryHousebot";
    }

    @Override
    public String getBotToken() {
        return System.getenv("BOT_TOKEN");
    }

    @Override
    public void onRegister() {
        super.onRegister();
    }
}
