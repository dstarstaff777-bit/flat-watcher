package flat_watcher;

import model.FlatListing;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import parser.AvitoParser;
import util.Config;

import java.time.Duration;
import java.util.List;

public class FlatWatcherBot extends TelegramLongPollingBot {

    private final String botToken;
    private final long chatId;

    public FlatWatcherBot() {
        // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ config.properties
        this.botToken = Config.getProperty("telegram.bot.token");
        String chatIdStr = Config.getProperty("telegram.chat.id");

        if (botToken == null || chatIdStr == null || chatIdStr.isEmpty()) {
            throw new IllegalArgumentException("‚ùå BOT_TOKEN –∏–ª–∏ CHAT_ID property is not set!");
        }

        this.chatId = Long.parseLong(chatIdStr);
    }

    @Override
    public String getBotUsername() {
        return "ValeryHousebot";
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String message = update.getMessage().getText();

            if (message.equalsIgnoreCase("/start")) {
                sendText(chatId, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç FlatWatcher.\n" +
                        "–Ø –ø–æ–º–æ–≥–∞—é –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–µ–∂–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞ Avito.\n\n" +
                        "–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã ‚Äî –æ—Ç–ø—Ä–∞–≤—å /find");
            } else if (message.equalsIgnoreCase("/find")) {
                sendText(chatId, "üîé –ü—Ä–æ–≤–µ—Ä—è—é –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 –º–∏–Ω—É—Ç...");

                try {
                    AvitoParser parser = new AvitoParser();
                    // –ø—Ä–∏–º–µ—Ä: –∏—â–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
                    List<FlatListing> listings = parser.fetchListings(
                            "https://www.avito.ru/uzlovaya/kvartiry/prodam",
                            Duration.ofHours(1)
                    );

                    if (listings.isEmpty()) {
                        sendText(chatId, "üì≠ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 –º–∏–Ω—É—Ç –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
                    } else {
                        sendText(chatId, "‚úÖ –ù–∞–π–¥–µ–Ω–æ " + listings.size() + " –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π:");

                        for (FlatListing flat : listings) {
                            String msg = String.format(
                                    "üè† %s\n" +
                                            "üí∞ –¶–µ–Ω–∞: %s ‚ÇΩ\n" +
                                            "üõè –ö–æ–º–Ω–∞—Ç: %s\n" +
                                            "üìç –†–∞–π–æ–Ω: %s\n" +
                                            "üïí –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: %s\n" +
                                            "üîó %s",
                                    flat.getTitle(),
                                    flat.getPrice() > 0 ? flat.getPrice() : "–Ω–µ —É–∫–∞–∑–∞–Ω–∞",
                                    flat.getRooms() > 0 ? flat.getRooms() : "–Ω–µ —É–∫–∞–∑–∞–Ω–æ",
                                    (flat.getDistrict() != null && !flat.getDistrict().isBlank()) ? flat.getDistrict() : "–Ω–µ —É–∫–∞–∑–∞–Ω",
                                    flat.getFormattedPublishedAt(),
                                    flat.getUrl()
                            );

                            sendText(chatId, msg);
                        }
                    }

                } catch (Exception e) {
                    e.printStackTrace();
                    sendText(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: " + e.getMessage());
                }
            } else {
                sendText(chatId, "ü§ñ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /find –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π.");
            }
        }
    }
    /* –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –≤ Telegram
     */
    private void sendText(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);

        try {
            execute(message);
        } catch (TelegramApiException e) {
            System.err.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: " + e.getMessage());
        }
    }
}
